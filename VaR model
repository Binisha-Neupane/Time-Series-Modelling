# Value at Risk (VAR) in python
#Step 1 package installation
!pip install yfinance statsmodels matplotlib numpy pandas

#Step 2 load programme
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.api import VAR
from scipy.stats import norm
#use prices from LSE and FT100 as index (from step 3)

#Step3 Download HSBC stock price data from Yahoo Finance // I calculate VaR for HSBC Bank; you can change ticker to use the company of your interest.
hsbc = yf.download('HSBA.L', start='2021-01-01', end='2024-01-01')

# Check the actual column names in the downloaded data
print(hsbc.columns)

# Access 'Adj Close' or the appropriate column name
# Replace 'Correct_Column_Name' with the actual column name if it's different
hsbc = hsbc['Close']  # Changed from 'Adj Close' to 'Close'

# Convert to DataFrame
data = pd.DataFrame(hsbc)
data.columns = ['HSBC_Price']

# Calculate daily returns
data['HSBC_Return'] = data['HSBC_Price'].pct_change().dropna()

# Remove NaN values
data.dropna(inplace=True)

# Add FT100 Index for VAR (you can add other variables)
ft100 = yf.download('^FTSE', start='2021-01-01', end='2024-01-01')['Close'] # Changed from 'Adj Close' to 'Close'

data['FT100'] = ft100.pct_change().dropna()
data.dropna(inplace=True)

# Display the first rows
print(data.head())

# Fit VAR model
model = VAR(data)
results = model.fit(maxlags=5)  # Choose lag based on AIC or BIC

# Display summary
print(results.summary())

# Forecast future returns
forecast = results.forecast(data.values[-5:], steps=1)
# The forecast includes predictions for all variables in the model.
# Adjust the column names to include all variables or select specific columns.
forecast_df = pd.DataFrame(forecast, columns=['HSBC_Price', 'HSBC_Return', 'FT100'])
# You can also select specific columns if needed, e.g.,
# forecast_df = pd.DataFrame(forecast, columns=data.columns[1:]) # Select 'HSBC_Return' and 'FT100'
print(forecast_df)

# Calculate mean and standard deviation from HSBC returns
mean_return = forecast_df['HSBC_Return'].iloc[0]
std_return = data['HSBC_Return'].std()

# Set confidence level (e.g., 95%)
confidence_level = 0.95
z_score = norm.ppf(1 - confidence_level)

# Calculate VaR
VaR = mean_return + z_score * std_return

print(f"Value at Risk (VaR) at {confidence_level*100}% confidence: {VaR:.4f}") #Value at Risk (VaR) at 95.0% confidence: -0.0278

# Plot HSBC Returns
data['HSBC_Return'].plot(title='HSBC Daily Returns')
plt.axhline(y=VaR, color='r', linestyle='--', label=f'VaR at {confidence_level*100}%')
plt.legend()
plt.show()
